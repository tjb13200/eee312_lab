###############################################################################
#
# IAR C/C++ Compiler V6.30.2.940/W32 for MSP430           19/Nov/2015  13:39:18
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 6.30
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        H:\My Documents\EE312\TemplateCode\eee312_lab\Lab 2\LEDdriver.c
#    Command line  =  
#        "H:\My Documents\EE312\TemplateCode\eee312_lab\Lab 2\LEDdriver.c" -lcN
#        "H:\My Documents\EE312\TemplateCode\eee312_lab\Lab 2\Debug\List\" -o
#        "H:\My Documents\EE312\TemplateCode\eee312_lab\Lab 2\Debug\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430FR4133__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.2\430\lib\dlib\dl430xlsfn.h" -I
#        "H:\My Documents\EE312\TemplateCode\eee312_lab\Lab 2\..\" -I "H:\My
#        Documents\EE312\TemplateCode\eee312_lab\Lab
#        2\..\driverlib\MSP430FR2xx_4xx\" --core=430X --data_model=small -On
#        --hw_workaround=CPU40 --segment __data16=DATA16 --segment
#        __data20=DATA20 --code_model=large
#    List file     =  
#        H:\My Documents\EE312\TemplateCode\eee312_lab\Lab
#        2\Debug\List\LEDdriver.lst
#    Object file   =  
#        H:\My Documents\EE312\TemplateCode\eee312_lab\Lab
#        2\Debug\Obj\LEDdriver.r43
#
###############################################################################

H:\My Documents\EE312\TemplateCode\eee312_lab\Lab 2\LEDdriver.c
      1          /**************************************************
      2           * LEDDriver.c
      3           * Drives LED display
      4           *
      5           * Copyright 2015 University of Strathclyde
      6           *
      7           *
      8           **************************************************/
      9          
     10          #include "LedDriver.h"
     11          
     12          //Current dial value
     13          unsigned char ledValue_ = 0;
     14          
     15          /**
     16          Initialise LED Dial, setting GPIO parameters
     17          */
     18          void initialiseLedDial()
     19          {
     20            //GPIO 2.7
     21            GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN7);
     22              
     23          
     24            //GPIO 5.1, 5.2, 5.3
     25          GPIO_setAsOutputPin(GPIO_PORT_P5, GPIO_PIN1  | GPIO_PIN2 | GPIO_PIN3);
     26          
     27          
     28              
     29            //GPIO 8.0
     30          GPIO_setAsOutputPin(GPIO_PORT_P8, GPIO_PIN0);
     31          
     32          }
     33          
     34          /** 
     35          Refresh the display
     36          */
     37          void refreshLedDial()
     38          {
     39            //Refresh lower bank (LEDs 1-4)
     40          
     41            if (ledValue_==1)
     42              
     43           {      
     44             GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     45             GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1);
     46             GPIO_setOutputLowOnPin(GPIO_PORT_P5,  GPIO_PIN2);
     47             GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN3);
     48             GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     49             
     50          }__delay_cycles(1000);
     51            if (ledValue_==2)
     52            {  
     53             GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     54             GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1);
     55             GPIO_setOutputHighOnPin(GPIO_PORT_P5,  GPIO_PIN2);
     56             GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN3);
     57             GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     58           
     59            }__delay_cycles(1000);
     60          if   (ledValue_==3)
     61          {
     62             GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     63             GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1);
     64             GPIO_setOutputLowOnPin(GPIO_PORT_P5,  GPIO_PIN2);
     65             GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN3);
     66             GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7); 
     67           
     68          }__delay_cycles(1000);
     69          if     (ledValue_==4)
     70          {
     71             GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
     72             GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1);
     73             GPIO_setOutputLowOnPin(GPIO_PORT_P5,  GPIO_PIN2);
     74             GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN3);
     75             GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN7);
     76          }__delay_cycles(1000);
     77             //Refresh lower bank (LEDs 5-8)
     78            
     79          if     (ledValue_==5)
     80          {
     81             GPIO_setOutputLowOnPin(GPIO_PORT_P8, GPIO_PIN0);
     82             GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1);
     83             GPIO_setOutputHighOnPin(GPIO_PORT_P5,  GPIO_PIN2);
     84             GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN3);
     85             GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
     86          }__delay_cycles(1000);
     87          
     88          if     (ledValue_==6)
     89          {
     90             GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
     91             GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN1);
     92             GPIO_setOutputHighOnPin(GPIO_PORT_P5,  GPIO_PIN2);
     93             GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN3);
     94             GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
     95          }__delay_cycles(1000);
     96          
     97          if     (ledValue_==7)
     98          {
     99             GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
    100             GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1);
    101             GPIO_setOutputLowOnPin(GPIO_PORT_P5,  GPIO_PIN2);
    102             GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN3);
    103             GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
    104          }__delay_cycles(1000);
    105          
    106          if     (ledValue_==8)
    107          {
    108             GPIO_setOutputHighOnPin(GPIO_PORT_P8, GPIO_PIN0);
    109             GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN1);
    110             GPIO_setOutputHighOnPin(GPIO_PORT_P5,  GPIO_PIN2);
    111             GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN3);
    112             GPIO_setOutputHighOnPin(GPIO_PORT_P2, GPIO_PIN7);
    113          }__delay_cycles(1000);
    114           
    115          }
    116          
    117          /** 
    118          Set dial value
    119          */
    120          void setLedDial(unsigned char value)
    121          {
    122            ledValue_ = value;
    123          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   initialiseLedDial
        0   -> GPIO_setAsOutputPin
        4   -> GPIO_setAsOutputPin
      4   refreshLedDial
        4   -> GPIO_setOutputHighOnPin
        4   -> GPIO_setOutputLowOnPin
      4   setLedDial


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      30  initialiseLedDial
       1  ledValue_
     522  refreshLedDial
       6  setLedDial

 
 558 bytes in segment CODE
   1 byte  in segment DATA16_Z
 
 558 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
